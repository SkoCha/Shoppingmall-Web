<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shopping.mapper.ShopMapper">

<select id="allGoodsList" resultType="com.shopping.domain.GoodsVO">
	<![CDATA[
	select * from 
		(
		select /*+INDEX_DESC(t_goods pk_goods) */
			rownum rn, gdsNum, gdsName, cateCode, gdsPrice, gdsStock, gdsDesc, gdsImg, gdsThumb, gdsDate
			from t_goods
			where rownum <= #{pageNum} * #{amount}
		) where rn > (#{pageNum} - 1) * #{amount}
	]]>	
</select>

<!-- 전체 게시물 수 조회 -->
<select id="getTotalCount" resultType="int">
	select count(*) from t_goods where gdsNum > 0
</select>

<!-- 카테고리 대분류 상품 목록 가져오기 -->
<select id="getGoodsList" resultType="com.shopping.domain.GoodsVO">
	select A.gdsNum, A.gdsName, A.cateCode, B.cateName, B.cateCodeRef, 
		A.gdsPrice, A.gdsStock, A.gdsDesc, A.gdsDate, A.gdsImg, A.gdsThumb  
			from t_goods A inner join t_goods_category B 
				on A.cateCode = B.cateCode where A.cateCode = #{cateCode}
				<if test="cateCode == cateCodeRef"> 
				or B.cateCodeRef = #{cateCodeRef}
				</if>
				order by A.gdsNum desc
</select>

<!-- 상품 상세 조회 -->
<select id="getGoodsView" resultType="com.shopping.domain.GoodsVO">
	select A.gdsNum, A.gdsName, A.cateCode, B.cateName, B.cateCodeRef, 
		A.gdsPrice, A.gdsStock, A.gdsDesc, A.gdsDate, A.gdsImg, A.gdsThumb  
			from t_goods A, t_goods_category B where A.gdsNum = #{gdsNum} AND A.cateCode = B.cateCode
</select>

<!-- 상품평 역순으로 조회 -->
<select id="getGoodsReply" resultType="com.shopping.domain.ReplyVO">
	select A.gdsNum, A.userId, A.repNum, A.repCon, A.repDate, B.userName
		from t_reply A inner join t_member B
			on A.userId = B.userId where gdsNum = #{gdsNum}
				order by A.repNum desc
</select>

<!-- 상품평 번호로 유저 ID 조회 -->
<select id="getUserId" resultType="String">
	select userId from t_reply where repNum = #{repNum}
</select>

<!-- 상품평 작성 -->
<insert id="registReply">
	insert into t_reply (gdsNum, userId, repNum, repCon) 
		values (#{gdsNum}, #{userId}, t_reply_seq.nextval, #{repCon})
</insert>

<!-- 상품평 삭제 --> 
<delete id="deleteReply">
	delete from t_reply 
		where repNum = #{repNum} and userId = #{userId}
</delete>

<!-- 상품평 수정 -->
<update id="modifyReply">
	update t_reply set
		repCon = #{repCon}
			where repNum = #{repNum} and userId = #{userId}
</update>

<!-- 상품 장바구니에 추가 -->
<insert id="addCart">
	insert into t_cart (cartNum, userId, gdsNum, cartStock)
		values (t_cart_seq.nextval, #{userId}, #{gdsNum}, #{cartStock})
</insert>

<!-- 장바구니 상품 목록 조회 -->
<select id="myCartList" resultType="com.shopping.domain.CartListVO">
	select row_number() over(order by C.cartNum desc) as num,
	        C.cartNum, C.userId, C.gdsNum, C.cartStock, C.addDate,
	        G.gdsName, G.gdsPrice, G.gdsStock, G.gdsThumb
	        from t_cart C inner join t_goods G
	        on C.gdsNum = G.gdsNum
	        where C.userId = #{userId}
</select>

<!-- 장바구니 상품 삭제 -->
<delete id="cartDelete">
	delete from t_cart where cartNum = #{cartNum}
</delete>

<!-- 주문 정보 -->
<insert id="orderInfo">
	insert into 
		t_order(orderId, userId, orderRec, userAddr1, userAddr2, userAddr3, orderPhone, amount)
		values (#{orderId}, #{userId}, #{orderRec}, #{userAddr1}, #{userAddr2}, #{userAddr3}, #{orderPhone}, #{amount})
</insert>

<!-- 주문 상세 정보 -->
<insert id="orderInfoDetails">
	insert into 
		t_order_details(orderDetailsNum, orderId, gdsNum, cartStock)
		select t_order_details_seq.nextval, #{orderId}, gdsNum, cartStock
		from t_cart
</insert>

<!-- 주문 성공 시 장바구니 내역 삭제 -->
<delete id="myCartDelete">
	delete t_cart where userId = #{userId}
</delete>

<!-- 내 주문 목록 조회 -->
<select id="getMyOrderList" resultType="com.shopping.domain.OrderVO">
	select * from t_order where userId = #{userId}
</select>

<!-- 내 주문 상세 목록 조회 -->
<select id="getMyOrderView" resultType="com.shopping.domain.OrderListVO">
	select
	    O.orderId, O.userId, O.orderRec, O.userAddr1, O.userAddr2, O.userAddr3, O.orderPhone, O.amount, O.orderDate, O.delivery,
	    D.orderDetailsNum, D.gdsNum, D.cartStock,
	    G.gdsName,  G.gdsThumb, G.gdsPrice
	    from t_order O 
	        inner join t_order_details D on O.orderId = D.orderId
	        inner join t_goods G on D.gdsNum = G.gdsNum
	        where O.userId = #{userId}
	        and O.orderId = #{orderId}
</select>

</mapper> 
